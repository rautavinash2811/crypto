# Accepting a prime number
while True:
    prime_input = input("Enter a prime number: ")
    if prime_input.isdigit():
        prime_val = int(prime_input)
        prime_check = sum(1 for num in range(1, prime_val + 1) if prime_val % num == 0)
        if prime_check == 2:
            break
    print("Invalid input. Please enter a valid prime number.")

# Accepting a primitive root
while True:
    root_input = input("Enter a primitive root: ")
    if root_input.isdigit():
        root_val = int(root_input)
        if root_val < prime_val:
            break
    print("Primitive root must be smaller than the prime number.")

root_values = []
for exponent in range(1, prime_val):
    computed_value = (root_val ** exponent) % prime_val
    if computed_value in root_values:
        root_values = None
        break
    root_values.append(computed_value)

if root_values is None:
    print(f"\n{root_val} is not a valid primitive root of {prime_val}\n")
else:
    print(f"\nValues generated by {root_val}: {root_values}\n")
    print(f"Sorted values: {sorted(root_values)}\n")

# Finding all primitive roots
primitive_roots = []
for potential_root in range(1, prime_val):
    temp_values = []
    for exponent in range(1, prime_val):
        mod_value = (potential_root ** exponent) % prime_val
        if mod_value in temp_values:
            break
        temp_values.append(mod_value)
    else:
        primitive_roots.append(potential_root)

print(f"\nAll primitive roots of {prime_val}: {primitive_roots}\n")
print(f"Total number of primitive roots: {len(primitive_roots)}\n")

# Encryption
print("Encryption \n")
p = prime_val
g = primitive_roots[0]
print(f"Prime number (p): {p}")
print(f"Generator value (g): {g}")

# Accepting secret key 'a'
while True:
    secret_key = input("Enter the secret key (a): ")
    if secret_key.isdigit():
        sec_key_val = int(secret_key)
        if 1 < sec_key_val < p:
            break
    print("Invalid input. Enter a value within the range (1 < a < p)")

A_val = (g ** sec_key_val) % p
print(f"Calculated A value: {A_val}")

# Accepting k
while True:
    k_value = input("Enter the value of K: ")
    if k_value.isdigit():
        k_val = int(k_value)
        if 1 < k_val < p - 2:
            break
    print("Invalid input. Enter a value within the range (1 < K < p-2)")

c1_val = (g ** k_val) % p

# Accepting plain text
while True:
    plaintext_input = input("Enter the plain text: ")
    if plaintext_input.isdigit():
        plaintext_val = int(plaintext_input)
        if 0 <= plaintext_val < p:
            break
    print("Invalid input. Plain text must be in range (0 <= pt < p)")

c2_val = (plaintext_val * (A_val ** k_val)) % p
print(f"Cipher values: c1 = {c1_val}, c2 = {c2_val}\n")

# Decryption
print("Decryption \n")
print("Decrypting the cipher text...")

original_plaintext = (c2_val * (c1_val ** (p - 1 - sec_key_val))) % p
print(f"Decrypted plain text: {original_plaintext}")